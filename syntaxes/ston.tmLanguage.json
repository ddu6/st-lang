{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"scopeName": "source.ston",
	"patterns": [
		{
			"include": "#topObject"
		},
		{
			"include": "#topArray"
		},
		{
			"include": "#topString"
		},
		{
			"include": "#topNumber"
		},
		{
			"include": "#topBoolean"
		},
		{
			"include": "#topUnquotedString"
		},
		{
			"include": "#space"
		},
		{
			"include": "#topInvalid"
		}
	],
	"repository": {
		"blockComment": {
			"begin": "/\\*",
			"end": "\\*/",
			"name": "comment.block"
		},
		"lineComment": {
			"begin": "//",
			"end": "$",
			"name": "comment.line"
		},
		"invalid": {
			"begin": "(?=.)",
			"end": "$",
			"name": "invalid.illegal"
		},
		"space": {
			"match": "\\s"
		},
		"comma": {
			"match": ","
		},
		"number": {
			"match": "(?<=(?:^|[',\\[\\]}])\\s*)(?:[+-]?Infinity|NaN|0x[\\dA-Fa-f]+|0o[0-7]+|0b[01]+|[+-]?(?:\\d*\\.?\\d+|\\d+\\.)(?:e[+-]?\\d+)?)(?=\\s*(?:$|[',\\[\\]{}]))",
			"name": "constant.numeric"
		},
		"boolean": {
			"match": "(?<=(?:^|[',\\[\\]}])\\s*)(?:true|false)(?=\\s*(?:$|[',\\[\\]{}]))",
			"name": "constant.language"
		},
		"unquotedString": {
			"match": "(?<=(?:^|[',\\[\\]}])\\s*)[^\\s',\\[\\]{}][^',\\[\\]{}]*?(?=\\s*(?:$|[',\\[\\]{}]))",
			"name": "string.unquoted"
		},
		"string": {
			"name": "string.quoted.single",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"match": "\\\\['\\\\]",
					"name": "constant.character.escape"
				}
			]
		},
		"object": {
			"begin": "\\{",
			"end": "\\}",
			"patterns": [
				{
					"include": "#blockComment"
				},
				{
					"include": "#lineComment"
				},
				{
					"include": "#value"
				},
				{
					"include": "#key"
				},
				{
					"include": "#comma"
				},
				{
					"include": "#space"
				},
				{
					"include": "#invalid"
				}
			]
		},
		"array": {
			"begin": "\\[",
			"end": "\\]",
			"patterns": [
				{
					"include": "#blockComment"
				},
				{
					"include": "#lineComment"
				},
				{
					"include": "#string"
				},
				{
					"include": "#object"
				},
				{
					"include": "#array"
				},
				{
					"include": "#comma"
				},
				{
					"include": "#number"
				},
				{
					"include": "#boolean"
				},
				{
					"include": "#unquotedString"
				},
				{
					"include": "#space"
				},
				{
					"include": "#invalid"
				}
			]
		},
		"value": {
			"patterns": [
				{
					"match": "(?<=[A-Za-z0-9_-]+\\s+)(?:[+-]?Infinity|NaN|0x[\\dA-Fa-f]+|0o[0-7]+|0b[01]+|[+-]?(?:\\d*\\.?\\d+|\\d+\\.)(?:e[+-]?\\d+)?)(?=\\s*(?:$|[',\\[\\]{}]))",
					"name": "constant.numeric"
				},
				{
					"match": "(?<=[A-Za-z0-9_-]+\\s+)(?:true|false)(?=\\s*(?:$|[',\\[\\]{}]))",
					"name": "constant.language"
				},
				{
					"match": "(?<=[A-Za-z0-9_-]+\\s+)[^\\s',\\[\\]{}][^',\\[\\]{}]*?(?=\\s*(?:$|[',\\[\\]{}]))",
					"name": "string.unquoted"
				},
				{
					"include": "#string"
				},
				{
					"include": "#object"
				},
				{
					"include": "#array"
				}
			]
		},
		"key": {
			"match": "(?<=(?:^|[',\\]{}])\\s*)[A-Za-z0-9_-]+(?=\\s*[\\s',\\[{}])",
			"name": "entity.other.attribute-name"
		},
		"topInvalid": {
			"begin": "(?=.)",
			"while": "",
			"name": "invalid.illegal"
		},
		"topObject": {
			"begin": "\\{",
			"while": "",
			"patterns": [
				{
					"include": "#blockComment"
				},
				{
					"include": "#lineComment"
				},
				{
					"include": "#value"
				},
				{
					"include": "#key"
				},
				{
					"include": "#comma"
				},
				{
					"include": "#space"
				},
				{
					"begin": "\\}",
					"while": "",
					"patterns": [
						{
							"include": "#space"
						},
						{
							"include": "#topInvalid"
						}
					]
				},
				{
					"include": "#topInvalid"
				}
			]
		},
		"topArray": {
			"begin": "\\[",
			"while": "",
			"patterns": [
				{
					"include": "#blockComment"
				},
				{
					"include": "#lineComment"
				},
				{
					"include": "#string"
				},
				{
					"include": "#object"
				},
				{
					"include": "#array"
				},
				{
					"include": "#comma"
				},
				{
					"include": "#number"
				},
				{
					"include": "#boolean"
				},
				{
					"include": "#unquotedString"
				},
				{
					"include": "#space"
				},
				{
					"begin": "\\]",
					"while": "",
					"patterns": [
						{
							"include": "#space"
						},
						{
							"include": "#topInvalid"
						}
					]
				},
				{
					"include": "#topInvalid"
				}
			]
		},
		"topString": {
			"name": "string.quoted.single",
			"begin": "'",
			"while": "",
			"patterns": [
				{
					"match": "\\\\['\\\\]",
					"name": "constant.character.escape"
				},
				{
					"begin": "'",
					"while": "",
					"patterns": [
						{
							"include": "#space"
						},
						{
							"include": "#topInvalid"
						}
					]
				}
			]
		},
		"topNumber": {
			"begin": "(?<=^\\s*)(?:[+-]?Infinity|NaN|0x[\\dA-Fa-f]+|0o[0-7]+|0b[01]+|[+-]?(?:\\d*\\.?\\d+|\\d+\\.)(?:e[+-]?\\d+)?)(?=\\s*$)",
			"while": "",
			"beginCaptures": {
				"0": {
					"name": "constant.numeric"
				}
			},
			"patterns": [
				{
					"include": "#space"
				},
				{
					"include": "#topInvalid"
				}
			]
		},
		"topBoolean": {
			"begin": "(?<=^\\s*)(?:true|false)(?=\\s*$)",
			"while": "",
			"beginCaptures": {
				"0": {
					"name": "constant.language"
				}
			},
			"patterns": [
				{
					"include": "#space"
				},
				{
					"include": "#topInvalid"
				}
			]
		},
		"topUnquotedString": {
			"begin": "(?<=^\\s*)[^\\s',\\[\\]{}][^',\\[\\]{}]*?(?=\\s*$)",
			"while": "",
			"beginCaptures": {
				"0": {
					"name": "string.unquoted"
				}
			},
			"patterns": [
				{
					"include": "#space"
				},
				{
					"include": "#topInvalid"
				}
			]
		}
	}
}