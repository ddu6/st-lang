{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"scopeName": "source.stdn",
	"patterns": [
		{
			"include": "#blockComment"
		},
		{
			"include": "#lineComment"
		},
		{
			"include": "#line"
		},
		{
			"include": "#string"
		},
		{
			"include": "#heading"
		},
		{
			"include": "#unit"
		},
		{
			"include": "#comma"
		},
		{
			"include": "#numberHolder"
		},
		{
			"include": "#booleanHolder"
		},
		{
			"include": "#unquotedString"
		},
		{
			"include": "#space"
		},
		{
			"include": "#invalid"
		}
	],
	"repository": {
		"blockComment": {
			"begin": "/\\*",
			"end": "\\*/",
			"name": "comment.block"
		},
		"lineComment": {
			"begin": "//",
			"end": "$",
			"name": "comment.line"
		},
		"invalid": {
			"begin": "(?=.)",
			"end": "$",
			"name": "invalid.illegal"
		},
		"space": {
			"match": "\\s"
		},
		"comma": {
			"match": ","
		},
		"numberHolder": {
			"name": "invalid.illegal",
			"match": "(?<=(?:^|[\\['},])\\s*)(?:[+-]?Infinity|NaN|0x[\\da-fA-F]+|0o[0-7]+|0b[01]+|[+-]?(?:\\d*\\.?\\d+|\\d+\\.)(?:e[+-]?\\d+)?)(?=\\s*(?:$|['{}\\[\\],]))"
		},
		"booleanHolder": {
			"name": "invalid.illegal",
			"match": "(?<=(?:^|[\\['},])\\s*)(?:true|false)(?=\\s*(?:$|['{}\\[\\],]))"
		},
		"unquotedString": {
			"name": "string.unquoted",
			"match": "(?<=(?:^|[\\['},])\\s*)[^\\s'{}\\[\\],][^'{}\\[\\],]*?(?=\\s*(?:$|['{}\\[\\],]))"
		},
		"string": {
			"name": "string.quoted.single",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape",
					"match": "\\\\['\\\\]"
				}
			]
		},
		"kstring": {
			"name": "string.quoted.single",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "keyword.control",
					"match": "\\\\{4}"
				},
				{
					"name": "constant.character.escape",
					"match": "\\\\['\\\\]"
				},
				{
					"name": "support.function.katex",
					"match": "\\\\[a-zA-Z]+"
				},
				{
					"name": "constant.numeric",
					"match": "\\d+"
				}
			]
		},
		"unit": {
			"begin": "\\{",
			"end": "\\}",
			"patterns": [
				{
					"include": "#blockComment"
				},
				{
					"include": "#lineComment"
				},
				{
					"include": "#value"
				},
				{
					"include": "#key"
				},
				{
					"include": "#comma"
				},
				{
					"include": "#space"
				},
				{
					"include": "#invalid"
				}
			]
		},
		"heading": {
			"begin": "\\{(?=[^\\[]*heading)",
			"end": "\\}",
			"name": "markup.heading",
			"patterns": [
				{
					"include": "#blockComment"
				},
				{
					"include": "#lineComment"
				},
				{
					"include": "#value"
				},
				{
					"include": "#key"
				},
				{
					"include": "#comma"
				},
				{
					"include": "#space"
				},
				{
					"include": "#invalid"
				}
			]
		},
		"line": {
			"begin": "\\[",
			"end": "\\]",
			"patterns": [
				{
					"include": "#blockComment"
				},
				{
					"include": "#lineComment"
				},
				{
					"include": "#string"
				},
				{
					"include": "#heading"
				},
				{
					"include": "#unit"
				},
				{
					"include": "#comma"
				},
				{
					"include": "#numberHolder"
				},
				{
					"include": "#booleanHolder"
				},
				{
					"include": "#unquotedString"
				},
				{
					"include": "#space"
				},
				{
					"include": "#invalid"
				}
			]
		},
		"kline": {
			"begin": "\\[",
			"end": "\\]",
			"patterns": [
				{
					"include": "#blockComment"
				},
				{
					"include": "#lineComment"
				},
				{
					"include": "#kstring"
				},
				{
					"include": "#heading"
				},
				{
					"include": "#unit"
				},
				{
					"include": "#comma"
				},
				{
					"include": "#space"
				},
				{
					"include": "#invalid"
				}
			]
		},
		"children": {
			"begin": "\\[",
			"end": "\\]",
			"patterns": [
				{
					"include": "#blockComment"
				},
				{
					"include": "#lineComment"
				},
				{
					"include": "#line"
				},
				{
					"include": "#string"
				},
				{
					"include": "#heading"
				},
				{
					"include": "#unit"
				},
				{
					"include": "#comma"
				},
				{
					"include": "#numberHolder"
				},
				{
					"include": "#booleanHolder"
				},
				{
					"include": "#unquotedString"
				},
				{
					"include": "#space"
				},
				{
					"include": "#invalid"
				}
			]
		},
		"kchildren": {
			"begin": "\\[",
			"end": "\\]",
			"patterns": [
				{
					"include": "#blockComment"
				},
				{
					"include": "#lineComment"
				},
				{
					"include": "#kline"
				},
				{
					"include": "#kstring"
				},
				{
					"include": "#heading"
				},
				{
					"include": "#unit"
				},
				{
					"include": "#comma"
				},
				{
					"include": "#space"
				},
				{
					"include": "#invalid"
				}
			]
		},
		"value": {
			"patterns": [
				{
					"begin": "(?<=(?:id|ref-id|href)\\s*)'",
					"end": "'",
					"name": "string.quoted.single",
					"contentName": "markup.underline.link",
					"patterns": [
						{
							"name": "constant.character.escape",
							"match": "\\\\['\\\\]"
						}
					]
				},
				{
					"name": "invalid.illegal",
					"match": "(?<=(?:id|ref-id|href)\\s+)(?:[+-]?Infinity|NaN|0x[\\da-fA-F]+|0o[0-7]+|0b[01]+|[+-]?(?:\\d*\\.?\\d+|\\d+\\.)(?:e[+-]?\\d+)?)(?=\\s*(?:$|['{}\\[\\],]))"
				},
				{
					"name": "invalid.illegal",
					"match": "(?<=(?:id|ref-id|href)\\s+)(?:true|false)(?=\\s*(?:$|['{}\\[\\],]))"
				},
				{
					"match": "(?<=(?:id|ref-id|href)\\s+)([^\\s'{}\\[\\],][^'{}\\[\\],]*?)(?=\\s*(?:$|['{}\\[\\],]))",
					"captures": {
						"0": {
							"name": "string.unquoted"
						},
						"1": {
							"name": "markup.underline.link"
						}
					}
				},
				{
					"begin": "(?<=[a-zA-Z0-9_-]+\\s*)'",
					"end": "'",
					"name": "string.quoted.single",
					"patterns": [
						{
							"name": "constant.character.escape",
							"match": "\\\\['\\\\]"
						}
					]
				},
				{
					"begin": "(?<=[a-zA-Z0-9_-]+\\s*)\\{",
					"end": "\\}",
					"patterns": [
						{
							"include": "#kstring"
						},
						{
							"include": "#children"
						},
						{
							"include": "#space"
						},
						{
							"include": "#invalid"
						}
					]
				},
				{
					"name": "constant.numeric",
					"match": "(?<=[a-zA-Z0-9_-]+\\s+)(?:[+-]?Infinity|NaN|0x[\\da-fA-F]+|0o[0-7]+|0b[01]+|[+-]?(?:\\d*\\.?\\d+|\\d+\\.)(?:e[+-]?\\d+)?)(?=\\s*(?:$|['{}\\[\\],]))"
				},
				{
					"name": "constant.language",
					"match": "(?<=[a-zA-Z0-9_-]+\\s+)(?:true|false)(?=\\s*(?:$|['{}\\[\\],]))"
				},
				{
					"begin": "(?<=(?:katex|aligned|alignedat|array|arraystretch|Bmatrix|bmatrix|cases|matrix|pmatrix|rcases|smallmatrix|Vmatrix|vmatrix)\\s*)\\[",
					"end": "\\]",
					"patterns": [
						{
							"include": "#blockComment"
						},
						{
							"include": "#lineComment"
						},
						{
							"include": "#kline"
						},
						{
							"include": "#kstring"
						},
						{
							"include": "#heading"
						},
						{
							"include": "#unit"
						},
						{
							"include": "#comma"
						},
						{
							"include": "#space"
						},
						{
							"include": "#invalid"
						}
					]
				},
				{
					"begin": "(?<=[a-zA-Z0-9_-]+\\s*)\\[",
					"end": "\\]",
					"patterns": [
						{
							"include": "#blockComment"
						},
						{
							"include": "#lineComment"
						},
						{
							"include": "#line"
						},
						{
							"include": "#string"
						},
						{
							"include": "#heading"
						},
						{
							"include": "#unit"
						},
						{
							"include": "#comma"
						},
						{
							"include": "#numberHolder"
						},
						{
							"include": "#booleanHolder"
						},
						{
							"include": "#unquotedString"
						},
						{
							"include": "#space"
						},
						{
							"include": "#invalid"
						}
					]
				},
				{
					"name": "string.unquoted",
					"match": "(?<=[a-zA-Z0-9_-]+\\s+)[^\\s'{}\\[\\],][^'{}\\[\\],]*?(?=\\s*(?:$|['{}\\[\\],]))"
				},
				{
					"include": "#kstring"
				},
				{
					"include": "#kchildren"
				}
			]
		},
		"key": {
			"patterns": [
				{
					"match": "(?<=(?:^|[,{}'])\\s*)[a-zA-Z0-9_-]+(?=\\s*\\[)",
					"name": "entity.name.type"
				},
				{
					"match": "(?<=(?:^|[,{}'])\\s*)[a-zA-Z0-9_-]+(?=\\s*[\\s'{}\\[,])",
					"name": "entity.other.attribute-name"
				}
			]
		}
	}
}